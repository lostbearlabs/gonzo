/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.lostbearlabs.gonzo

import org.apache.log4j.BasicConfigurator
import org.apache.log4j.Level
import org.apache.log4j.Logger
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.ListBranchCommand.ListMode
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import java.io.File


//class App {
//    val greeting: String
//        get() {
//            return "Hello World!"
//        }
//}

fun main(args: Array<String>) {
    BasicConfigurator.configure()
    Logger.getRootLogger().level = Level.INFO;

    val argText = args.joinToString(" ")
    println("hello: $argText")

    val workingDirectory = System.getProperty("user.dir")
    println("workingDirectory: $workingDirectory")


    val level = Logger.getRootLogger().level
    Logger.getRootLogger().level = Level.ERROR; // suppress annoying warning where jgit tries to launch a shell to find non-default git path
    val repo: Repository = FileRepositoryBuilder.create(File(workingDirectory, ".git"))
    Logger.getRootLogger().level = level;

    repo.use {
        println("make repo...")
        val git = Git(repo)
        git.use {

            println("get branches...")
            val prefix = "refs/heads/"
            val listRefsBranches = git.branchList().setListMode(ListMode.ALL).call()
            for (refBranch in listRefsBranches) {
                if (refBranch.name.startsWith(prefix, 0)) {
                    println("Branch : " + refBranch.name.removePrefix(prefix))
                }
            }
            println("end of branches")
        }
    }
}
